name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Ignore changes to this file to prevent loops
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, would add tests in a real project"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the code
      
      - name: Setup Node.js
        uses: actions/setup-node@v4  # Use the Node.js action
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the code
      
      - name: Setup Node.js
        uses: actions/setup-node@v4  # Use the Node.js action
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4  # Upload the build artifacts
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      # Converting image name to lowercase to avoid Docker reference parsing issues
      IMAGE_NAME: ${{ format('{0}', github.repository) }}  # Use the GitHub repository name as the image name
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}  # Output the image tag for later use
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4  # Download the build artifacts
        with:
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Use the Docker Buildx action
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3  # Use the Docker login action
        with:
          registry: ${{ env.REGISTRY }} # This is the GitHub Container Registry
          username: ${{ github.actor }} # This is the GitHub username
          password: ${{ secrets.TOKEN }} # This is a GitHub Personal Access Token
      
      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }} # The image name # ghcr.io/owner/repo:sha-<commit-sha>
          tags: |
            type=sha,format=long    
            type=ref,event=branch
            latest
      
      - name: Build Docker image # Build the Docker image
        uses: docker/build-push-action@v5 # Use the Docker build and push action
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      
      - name: Run Trivy vulnerability scanner # Run the Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master # Use the Trivy action
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}:sha-${{ github.sha }} # The image name with the commit SHA # ghcr.io/owner/repo:sha-<commit-sha>
          format: 'table' # Output format
          exit-code: '1'  # Exit with error code if vulnerabilities are found
          ignore-unfixed: true # Ignore unfixed vulnerabilities
          vuln-type: 'os,library' # Scan for OS and library vulnerabilities
          severity: 'CRITICAL,HIGH' # Scan for critical and high severity vulnerabilities
      
      - name: Push Docker image # Push the Docker image
        uses: docker/build-push-action@v5 # Use the Docker build and push action
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Use the tags from the metadata action 
          labels: ${{ steps.meta.outputs.labels }} # Use the labels from the metadata action
      
      - name: Set image tag output # Set the image tag as an output
        id: set_output 
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT # Output the first 7 characters of the commit SHA 

  update-k8s: # Update the Kubernetes deployment file with the new image tag
    name: Update Kubernetes Deployment 
    runs-on: ubuntu-latest 
    needs: [docker] 
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Convert repository name to lowercase
          LOWERCASE_REPO=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${LOWERCASE_REPO}:${IMAGE_TAG}"
          
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push